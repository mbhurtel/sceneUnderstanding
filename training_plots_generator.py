# Import necessary packages
import pandas as pd
import matplotlib.pyplot as plt
import glob
import os
import shutil

# Create the required directories
if not os.path.exists("all_results"):
    os.mkdir("all_results")
if not os.path.exists("all_results/training_results"):
    os.mkdir("all_results/training_results")

# Titles for each of the subplots
s = ['Box Loss', 'Objectness Loss', 'Classification Loss', 'Precision', 'Recall',
     'Val Box Loss', 'Val Objectness Loss', 'Val Classification Loss', 'mAP@0.5', 'mAP@0.5:0.95']

# The different attribute for the plots visualization
colors = ["red", "green", "orange", "blue", "maroon"]
linestyles = [None, None, None, "--", None]
markers = [">", "d", "|", None, "."]
linewidths = [0.5, 0.5, 0.5, 1, 0.5]
markersizes = [0.5, 0.5, 1.75, 1.5, 1.5]

# Generating the subplots skeleton
save_dir = f"all_results/training_results"
fig, ax = plt.subplots(2, 5, figsize=(12, 6), tight_layout=True)
ax = ax.ravel()

# Listing the results for each model
dirs = [f"runs/train/results_YOLOv5{name}" for name in ['n', 's', 'm', 'l', 'x']]
files = [f"{d}/results.csv" for d in dirs]

labels = [d.split("_")[1] for d in dirs]
xlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
xlabel_flag = False

# Looping over each csv file
for index, f in enumerate(files):
    try:
        data = pd.read_csv(f)
        x = data.values[:, 0]
        
        # Looping over only the required columns
        for i, j in enumerate([1, 2, 3, 4, 5, 8, 9, 10, 6, 7]):
            
            # Plotting the results for the current csv file
            y = data.values[:, j].astype('float')
            ax[i].plot(x, y, marker = markers[index], linewidth = linewidths[index], c = colors[index],
                       label = labels[index], linestyle = linestyles[index], markersize = markersizes[index])
            ax[i].set_title(s[i])
            
            # Adjusting the limit value to enhance visualization
            if s[i] == "mAP@0.5":
                ax[i].set_ylim(0, 0.8)
            
            # Setting the subplot labels
            if not xlabel_flag:
                ax[i].set_xlabel(f"({xlabels[i]})")
        xlabel_flag = True

    except Exception as e:
        print(f'Warning: Plotting error for {f}: {e}')

# Legend on first subplot
ax[0].legend()

# Saving the results
fig.savefig(f"{save_dir}/results.jpg", dpi=400, bbox_inches="tight")
plt.close()

# Now we save the table showing four evaluation metrics
columns=["Model", "Precision", "Recall", "mAP@0.5", "mAP@0.5:0.95"]
training_results = pd.DataFrame(columns=columns)
for i, file in enumerate(files):
    model_name = [labels[i]]
    data = pd.read_csv(file)
    data_required = list(data.iloc[-1, 4:8])
    data_merged = model_name + data_required
    data_dict = dict(zip(columns, data_merged))
    training_results = training_results.append(data_dict, ignore_index=True)
training_results = training_results.set_index("Model")
training_results.to_csv(f"{save_dir}/results_table.csv")

# Copying the Precision-Recall curve generated by YOLOv5x model to the results directory
if os.path.exists("runs/train/results_YOLOv5x"):
    shutil.copy("runs/train/results_YOLOv5x/PR_curve.png", "all_results/training_results/PR_curve.png")

print(f"Training results saved at {save_dir}!")